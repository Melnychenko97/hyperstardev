{"version":3,"sources":["components/hide-button/hide-button.component.jsx","components/tab-item/tab-item.component.jsx","components/sub-list/sub-list.component.jsx","components/list/utils/index.js","components/list/list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["HideButton","HideAll","Consumer","closeOpenedList","className","type","onClick","TabItem","name","ShowAll","enableClick","SubList","WrappedComponent","props","toggleSubMenu","isActive","state","setState","this","children","otherProps","length","map","nestedItem","index","InnerComponent","key","React","Component","formattedApi","JSON","stringify","WithSubListTabItem","createContext","List","api","parse","isHideAll","event","stopPropagation","Provider","value","data","continent","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.971f4ee3.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { HideAll } from '../list/list.component';\n\nimport './hide-button.styles.scss';\n\nconst HideButton = () => (\n    <HideAll.Consumer>\n        {closeOpenedList =>\n            <button className=\"hide-button\" type=\"button\" onClick={ closeOpenedList }>Hide All</button>\n        }\n    </HideAll.Consumer>\n);\n\nexport default HideButton;","import React from \"react\";\n\nimport HideButton from \"../hide-button/hide-button.component\";\nimport { ShowAll } from \"../list/list.component\";\n\nimport './tab-item.styles.scss';\n\nconst TabItem = ({ name }) => (\n    <ShowAll.Consumer>\n        {\n            enableClick => (\n                <div className=\"tab\" onClick={ enableClick }>\n                    <h2>{ name }</h2>\n                    <HideButton />\n                </div>\n            )\n        }\n    </ShowAll.Consumer>\n);\n\nexport default TabItem;","import React from \"react\";\n\nimport './sub-list.styles.scss';\n\n\nconst SubList = WrappedComponent => {\n    return class InnerComponent extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                isActive: false,\n            };\n        }\n    \n        toggleSubMenu = () => {\n            const { isActive } = this.state;\n        \n            this.setState({\n                isActive: !isActive,\n            });\n        }\n        \n        render() {\n            const { isActive } = this.state;\n            const { name, children, ...otherProps } = this.props;\n            \n            return (\n                children && children.length ? (\n                    <li className=\"sublist__item\">\n                        <div className=\"sublist__clickable-wrapper\" onClick={ this.toggleSubMenu }>\n                            <WrappedComponent name={ name } { ...otherProps } />\n                        </div>\n                        {\n                            isActive ? (\n                                <ul>\n                                    {\n                                        children.map((nestedItem, index) =>\n                                            <InnerComponent\n                                                name={ nestedItem.name }\n                                                children={ nestedItem.children }\n                                                key={ index }\n                                            />)\n                                    }\n                                </ul>\n                            ) : null\n                        }\n                    </li>\n                ) : (\n                    <li className=\"sublist__item\">\n                        <WrappedComponent name={ name } { ...otherProps } />\n                    </li>\n                )\n            )\n        }\n    }\n}\n\nexport default SubList;","const api = {\n    \"data\": [\n        {\n            \"name\": \"Continents\",\n            \"children\": [\n                {\n                    \"name\": \"Africa\",\n                    \"children\": [\n                        {\n                            \"name\": \"Egypt\",\n                            \"children\": [\n                                {\n                                    \"name\": \"Arabic\",\n                                    \"children\": []\n                                },\n                                {\n                                    \"name\": \"English\",\n                                    \"children\": []\n                                }\n                            ]\n                        },\n                        {\n                            \"name\": \"Sierra Leone\",\n                            \"children\": []\n                        },\n                        {\n                            \"name\": \"Algeria\",\n                            \"children\": []\n                        },\n                        {\n                            \"name\": \"Libya\",\n                            \"children\": []\n                        },\n                        {\n                            \"name\": \"Morocco\",\n                            \"children\": []\n                        }\n                    ]\n                },\n                {\n                    \"name\": \"Asia\",\n                    \"children\": []\n                },\n                {\n                    \"name\": \"Europe\",\n                    \"children\": [\n                        // ...\n                    ]\n                },\n                // ...\n            ]\n        },\n        {\n            \"name\": \"String\",\n            \"children\": [\n            ]\n        },\n    ]\n}\n\nexport const formattedApi = JSON.stringify(api);","import React from \"react\";\n\nimport TabItem from \"../tab-item/tab-item.component\";\nimport SubList from \"../sub-list/sub-list.component\";\n\nimport './list.styles.scss';\n\nimport { formattedApi } from \"./utils\";\n\n\nconst WithSubListTabItem = SubList(TabItem);\n\nexport const HideAll = React.createContext(null);\nexport const ShowAll = React.createContext(null);\n\nclass List extends React.Component  {\n    state = {\n        api: JSON.parse(formattedApi),\n        isHideAll: false,\n    }\n    \n    closeOpenedList = event => {\n        event.stopPropagation();\n        \n        this.setState({\n            isHideAll: true\n        });\n    }\n    \n    enableClick = () => {\n        this.setState({\n            isHideAll: false,\n        });\n    }\n    \n    render() {\n        const { api, isHideAll } = this.state;\n        return (\n            <ul className=\"list\">\n                <ShowAll.Provider value={ this.enableClick }>\n                    <HideAll.Provider value={ this.closeOpenedList }>\n                        {\n                            api.data.map((continent, index) =>\n                                <WithSubListTabItem\n                                    key={  index }\n                                    name={ continent.name }\n                                    children={ !isHideAll ? continent.children : null }\n                                />)\n                        }\n                    </HideAll.Provider>\n                </ShowAll.Provider>\n            </ul>\n        );\n    }\n}\n\nexport default List;","import React from 'react';\nimport List from \"./components/list/list.component\";\n\nconst App = () => (\n  <List />\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}